# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:
        queue = deque()
        ans = []
        current_depth = 0 
        queue.append((root,1))
        while queue:
            node, depth = queue.popleft()
            if depth > current_depth:
                ans.append([node.val])
            if depth == current_depth:
                ans[-1].append(node.val)
            if node.right:
                queue.append((node.right, depth+1))
            if node.left:
                queue.append((node.left, depth+1))
        return ans[-1][0]
        
